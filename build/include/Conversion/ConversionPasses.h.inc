/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_LOWERARITHTONEURA
#define GEN_PASS_DECL_LOWERBUILTINTONEURA
#define GEN_PASS_DECL_LOWERLLVMTONEURA
#define GEN_PASS_DECL_LOWERMEMREFTONEURA
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// LowerArithToNeura
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LOWERARITHTONEURA
#undef GEN_PASS_DECL_LOWERARITHTONEURA
#endif // GEN_PASS_DECL_LOWERARITHTONEURA
#ifdef GEN_PASS_DEF_LOWERARITHTONEURA
namespace impl {

template <typename DerivedT>
class LowerArithToNeuraBase : public ::mlir::OperationPass<FuncOp> {
public:
  using Base = LowerArithToNeuraBase;

  LowerArithToNeuraBase() : ::mlir::OperationPass<FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerArithToNeuraBase(const LowerArithToNeuraBase &other) : ::mlir::OperationPass<FuncOp>(other) {}
  LowerArithToNeuraBase& operator=(const LowerArithToNeuraBase &) = delete;
  LowerArithToNeuraBase(LowerArithToNeuraBase &&) = delete;
  LowerArithToNeuraBase& operator=(LowerArithToNeuraBase &&) = delete;
  ~LowerArithToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-arith-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-arith-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower arith to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerArithToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerArithToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerArithToNeuraBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_LOWERARITHTONEURA
#endif // GEN_PASS_DEF_LOWERARITHTONEURA

//===----------------------------------------------------------------------===//
// LowerBuiltinToNeura
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LOWERBUILTINTONEURA
#undef GEN_PASS_DECL_LOWERBUILTINTONEURA
#endif // GEN_PASS_DECL_LOWERBUILTINTONEURA
#ifdef GEN_PASS_DEF_LOWERBUILTINTONEURA
namespace impl {

template <typename DerivedT>
class LowerBuiltinToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerBuiltinToNeuraBase;

  LowerBuiltinToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerBuiltinToNeuraBase(const LowerBuiltinToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerBuiltinToNeuraBase& operator=(const LowerBuiltinToNeuraBase &) = delete;
  LowerBuiltinToNeuraBase(LowerBuiltinToNeuraBase &&) = delete;
  LowerBuiltinToNeuraBase& operator=(LowerBuiltinToNeuraBase &&) = delete;
  ~LowerBuiltinToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-builtin-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-builtin-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower Builtin to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerBuiltinToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerBuiltinToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerBuiltinToNeuraBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_LOWERBUILTINTONEURA
#endif // GEN_PASS_DEF_LOWERBUILTINTONEURA

//===----------------------------------------------------------------------===//
// LowerLlvmToNeura
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LOWERLLVMTONEURA
#undef GEN_PASS_DECL_LOWERLLVMTONEURA
#endif // GEN_PASS_DECL_LOWERLLVMTONEURA
#ifdef GEN_PASS_DEF_LOWERLLVMTONEURA
namespace impl {

template <typename DerivedT>
class LowerLlvmToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerLlvmToNeuraBase;

  LowerLlvmToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerLlvmToNeuraBase(const LowerLlvmToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerLlvmToNeuraBase& operator=(const LowerLlvmToNeuraBase &) = delete;
  LowerLlvmToNeuraBase(LowerLlvmToNeuraBase &&) = delete;
  LowerLlvmToNeuraBase& operator=(LowerLlvmToNeuraBase &&) = delete;
  ~LowerLlvmToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-llvm-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-llvm-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower LLVM to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerLlvmToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerLlvmToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerLlvmToNeuraBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_LOWERLLVMTONEURA
#endif // GEN_PASS_DEF_LOWERLLVMTONEURA

//===----------------------------------------------------------------------===//
// LowerMemRefToNeura
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LOWERMEMREFTONEURA
#undef GEN_PASS_DECL_LOWERMEMREFTONEURA
#endif // GEN_PASS_DECL_LOWERMEMREFTONEURA
#ifdef GEN_PASS_DEF_LOWERMEMREFTONEURA
namespace impl {

template <typename DerivedT>
class LowerMemRefToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerMemRefToNeuraBase;

  LowerMemRefToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerMemRefToNeuraBase(const LowerMemRefToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerMemRefToNeuraBase& operator=(const LowerMemRefToNeuraBase &) = delete;
  LowerMemRefToNeuraBase(LowerMemRefToNeuraBase &&) = delete;
  LowerMemRefToNeuraBase& operator=(LowerMemRefToNeuraBase &&) = delete;
  ~LowerMemRefToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-memref-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-memref-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower MemRef to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerMemRefToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerMemRefToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerMemRefToNeuraBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_LOWERMEMREFTONEURA
#endif // GEN_PASS_DEF_LOWERMEMREFTONEURA
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// LowerArithToNeura Registration
//===----------------------------------------------------------------------===//

inline void registerLowerArithToNeura() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerArithToNeuraPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLowerArithToNeuraPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerArithToNeuraPass();
  });
}

//===----------------------------------------------------------------------===//
// LowerBuiltinToNeura Registration
//===----------------------------------------------------------------------===//

inline void registerLowerBuiltinToNeura() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerBuiltinToNeuraPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLowerBuiltinToNeuraPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerBuiltinToNeuraPass();
  });
}

//===----------------------------------------------------------------------===//
// LowerLlvmToNeura Registration
//===----------------------------------------------------------------------===//

inline void registerLowerLlvmToNeura() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerLlvmToNeuraPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLowerLlvmToNeuraPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerLlvmToNeuraPass();
  });
}

//===----------------------------------------------------------------------===//
// LowerMemRefToNeura Registration
//===----------------------------------------------------------------------===//

inline void registerLowerMemRefToNeura() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerMemRefToNeuraPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLowerMemRefToNeuraPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLowerMemRefToNeuraPass();
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerLowerArithToNeura();
  registerLowerBuiltinToNeura();
  registerLowerLlvmToNeura();
  registerLowerMemRefToNeura();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class LowerArithToNeuraBase : public ::mlir::OperationPass<FuncOp> {
public:
  using Base = LowerArithToNeuraBase;

  LowerArithToNeuraBase() : ::mlir::OperationPass<FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerArithToNeuraBase(const LowerArithToNeuraBase &other) : ::mlir::OperationPass<FuncOp>(other) {}
  LowerArithToNeuraBase& operator=(const LowerArithToNeuraBase &) = delete;
  LowerArithToNeuraBase(LowerArithToNeuraBase &&) = delete;
  LowerArithToNeuraBase& operator=(LowerArithToNeuraBase &&) = delete;
  ~LowerArithToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-arith-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-arith-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower arith to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerArithToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerArithToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerArithToNeuraBase<DerivedT>)

protected:
};

template <typename DerivedT>
class LowerBuiltinToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerBuiltinToNeuraBase;

  LowerBuiltinToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerBuiltinToNeuraBase(const LowerBuiltinToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerBuiltinToNeuraBase& operator=(const LowerBuiltinToNeuraBase &) = delete;
  LowerBuiltinToNeuraBase(LowerBuiltinToNeuraBase &&) = delete;
  LowerBuiltinToNeuraBase& operator=(LowerBuiltinToNeuraBase &&) = delete;
  ~LowerBuiltinToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-builtin-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-builtin-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower Builtin to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerBuiltinToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerBuiltinToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerBuiltinToNeuraBase<DerivedT>)

protected:
};

template <typename DerivedT>
class LowerLlvmToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerLlvmToNeuraBase;

  LowerLlvmToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerLlvmToNeuraBase(const LowerLlvmToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerLlvmToNeuraBase& operator=(const LowerLlvmToNeuraBase &) = delete;
  LowerLlvmToNeuraBase(LowerLlvmToNeuraBase &&) = delete;
  LowerLlvmToNeuraBase& operator=(LowerLlvmToNeuraBase &&) = delete;
  ~LowerLlvmToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-llvm-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-llvm-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower LLVM to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerLlvmToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerLlvmToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerLlvmToNeuraBase<DerivedT>)

protected:
};

template <typename DerivedT>
class LowerMemRefToNeuraBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = LowerMemRefToNeuraBase;

  LowerMemRefToNeuraBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LowerMemRefToNeuraBase(const LowerMemRefToNeuraBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  LowerMemRefToNeuraBase& operator=(const LowerMemRefToNeuraBase &) = delete;
  LowerMemRefToNeuraBase(LowerMemRefToNeuraBase &&) = delete;
  LowerMemRefToNeuraBase& operator=(LowerMemRefToNeuraBase &&) = delete;
  ~LowerMemRefToNeuraBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-memref-to-neura");
  }
  ::llvm::StringRef getArgument() const override { return "lower-memref-to-neura"; }

  ::llvm::StringRef getDescription() const override { return "Lower MemRef to Neura dialect"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerMemRefToNeura");
  }
  ::llvm::StringRef getName() const override { return "LowerMemRefToNeura"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LowerMemRefToNeuraBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
